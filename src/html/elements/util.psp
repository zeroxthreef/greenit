<%!
	//control the globals and the redis db connection
	import redis_client;
	
	int first = 1, connected = 0, page_num = 0;
	Redis db;
	//IMPORTANT. I dev on the same redis db for all of my projects so I have to set it to another index
	int db_index = 2;
	
	string db_prefix = "greenit:";
	string default_all_text = "Hello, this is the \"main\" page where posts are. This is just like Reddit but worse. Theres no crossposting so you're just gonna have to link or something if you wanna make posts in other subgreenits appear here. \n\n\n[b]g/all rules(more like suggestions) -[/b]\n\n* Since this is the very first page people see on this terrible site, don't post anything illegal and other bad stuff y'know.\n\n*If you really wanna break this site, keep that stuff in [b]g/breakme[/b] [url]/g/breakme/[/url] if it exists.\n\n* Please don't spam this subgreenit. The way I retrieve posts is pretty bad and it goes kinda slow with a lot of stuff.\n\n* This is just an experiment, I don't take it too seriously so these \"rules\" arent super important to me. I just don't wanna have to hunt through the db to fix things because I don't really have time for it.";
	string format_notes = "Notes on formatting:<br><br>for videos, take the youtube video id (no ?=) place it between a [video]id_here[/video] tag.<br><br>for images, only imgur works. Copy an imgur image location and place everything after the imgur domain name between [img]image.png[/img]<br><br>For bold, underline, and italics, follow the same ide of opening and closing tags, but with [b][/b], [i],[/i], and [u],[/u]<br><br>";
	
	//=========================
	
	string format_username(string username)
	{
		string fina_strl = filter_string(username);
		//return lower_case(fina_strl);
		return fina_strl;
	}
	
	string filter_string(string old)
	{
		//prevent XSS
		string fina_strl;
		fina_strl = replace(old, "<", "&lt;");
		fina_strl = replace(fina_strl, ">", "&gt;");
		
		return fina_strl;
	}
	
	string username_from_token(string token)
	{
		if(token)
		{
			string key = db->get(db_prefix + "token:" + replace(token, "\r\n", ""));
			string response;
			
			if(key)
				response = db->hget(replace(key, "\r\n", ""), "username");
			
			if(response)
				return replace(response, "\r\n", "");
			else
				return "";
		}
		return "";
	}
	
	int user_logged_in(string token)
	{
		return strlen(username_from_token(token));
	}
	
	int is_clean_sg_string(string subgreenit)
	{
		if(strlen(subgreenit) > 30 || strlen(subgreenit) < 2)
			return 0;
		
		for(int i = 0; i < strlen(subgreenit); i++)//make sure only alpha
		{
			if((subgreenit[i] < 65 || subgreenit[i] > 90) && (subgreenit[i] < 97 || subgreenit[i] > 122))
				return 0;
		}
		
		return 1;
	}
	
	string trim_uri(string query)
	{
		array(string) temp = query / "?";
		return temp[0];
	}
	
	mixed get_hash_value(array(mixed) hash, mixed value)
	{
		if(hash)
		{
			
			for(int i = 0; i < sizeof(hash); i++)
			{
				write("woohoo %s\n", (string)hash[i]);
				
				if(hash == value)
					return hash[i + 1];
			}
		}
		else
			write("fuck\n");
		
		return 0;
	}
	
	//for whatever reason, this pike redis client corrupts things
	string decorrupt(string input)
	{
		return replace(replace(input, "\r", ""), "\n", "");
	}
	
%>

<%
	//manage the globals
	if(first)
	{
		write("connecting to redis db\n");
		db = Redis();
		db->connect();
		
		if(db->ping() && db->select(db_index))
		{
			connected++;
			write("redis db conection successful\n");
		}
		else
			write("unable to connecto to redis db\n");
		
		
		// make sure the /g/all subgreenit exists
		if(!db->exists("greenit:subgreenit:all"))
		{
			db->hmset(db_prefix + "subgreenit:all", "name", "all", "creator","g", "about", default_all_text, "date_created", Protocols.HTTP.Server.http_date(time()));
			db->lpush(db_prefix + "variable:subgreenits" ,db_prefix + "subgreenit:all");
			write("the g/all subgreenit was created\n");
		}
		
		//==================
		first = 0;
	}
	//this gets corrupted for whatever reason
	page_num = (int)request->variables->p;
	//write("hey " + page_num + "\n");
%>